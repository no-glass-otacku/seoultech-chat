{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\song\\\\Documents\\\\GitHub\\\\seoultech-chat\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload,\n        loading: false\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false\n      };\n    default:\n      return state;\n  }\n};\n\n// 가짜 사용자 정보 (테스트용) - 컴포넌트 외부에 정의하여 재생성 방지\nconst mockUser = {\n  id: 1,\n  email: 'test@seoultech.ac.kr',\n  username: '테스트사용자',\n  created_at: new Date().toISOString()\n};\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  // 초기에는 로딩 상태\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    // 컴포넌트 마운트 시 한 번만 실행\n    const initAuth = () => {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // 짧은 지연 후 자동 로그인 (실제 앱처럼 보이게 하기 위함)\n      setTimeout(() => {\n        dispatch({\n          type: 'SET_USER',\n          payload: mockUser\n        });\n      }, 500);\n    };\n    initAuth();\n  }, []); // 빈 의존성 배열로 한 번만 실행\n\n  // 모든 인증 관련 함수들을 useCallback으로 메모이제이션\n  const login = useCallback(async (email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // 실제 로그인 대신 가짜 성공 처리\n      await new Promise(resolve => setTimeout(resolve, 300));\n      dispatch({\n        type: 'SET_USER',\n        payload: mockUser\n      });\n      return {\n        user: mockUser\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: '로그인에 실패했습니다.'\n      });\n      throw error;\n    }\n  }, []);\n  const register = useCallback(async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // 실제 회원가입 대신 가짜 성공 처리\n      await new Promise(resolve => setTimeout(resolve, 300));\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n      return {\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: '회원가입에 실패했습니다.'\n      });\n      throw error;\n    }\n  }, []);\n  const logout = useCallback(() => {\n    // 로그아웃해도 다시 자동 로그인 (테스트 모드이므로)\n    dispatch({\n      type: 'LOGOUT'\n    });\n    setTimeout(() => {\n      dispatch({\n        type: 'SET_USER',\n        payload: mockUser\n      });\n    }, 100);\n  }, []);\n  const clearError = useCallback(() => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  }, []);\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"KtnZolyAEPFElPgnviu4t+XofbY=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","useCallback","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","payload","user","isAuthenticated","error","mockUser","id","email","username","created_at","Date","toISOString","initialState","AuthProvider","children","_s","dispatch","initAuth","setTimeout","login","password","Promise","resolve","register","userData","message","logout","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/song/Documents/GitHub/seoultech-chat/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect, useCallback } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_USER':\r\n      return { ...state, user: action.payload, isAuthenticated: !!action.payload, loading: false };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload, loading: false };\r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    case 'LOGOUT':\r\n      return { ...state, user: null, isAuthenticated: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// 가짜 사용자 정보 (테스트용) - 컴포넌트 외부에 정의하여 재생성 방지\r\nconst mockUser = {\r\n  id: 1,\r\n  email: 'test@seoultech.ac.kr',\r\n  username: '테스트사용자',\r\n  created_at: new Date().toISOString()\r\n};\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  loading: true, // 초기에는 로딩 상태\r\n  error: null\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // 컴포넌트 마운트 시 한 번만 실행\r\n    const initAuth = () => {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // 짧은 지연 후 자동 로그인 (실제 앱처럼 보이게 하기 위함)\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_USER', payload: mockUser });\r\n      }, 500);\r\n    };\r\n\r\n    initAuth();\r\n  }, []); // 빈 의존성 배열로 한 번만 실행\r\n\r\n  // 모든 인증 관련 함수들을 useCallback으로 메모이제이션\r\n  const login = useCallback(async (email, password) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // 실제 로그인 대신 가짜 성공 처리\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      dispatch({ type: 'SET_USER', payload: mockUser });\r\n      return { user: mockUser };\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: '로그인에 실패했습니다.' });\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const register = useCallback(async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // 실제 회원가입 대신 가짜 성공 처리\r\n      await new Promise(resolve => setTimeout(resolve, 300));\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n      return { message: 'Registration successful' };\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: '회원가입에 실패했습니다.' });\r\n      throw error;\r\n    }\r\n  }, []);\r\n\r\n  const logout = useCallback(() => {\r\n    // 로그아웃해도 다시 자동 로그인 (테스트 모드이므로)\r\n    dispatch({ type: 'LOGOUT' });\r\n    setTimeout(() => {\r\n      dispatch({ type: 'SET_USER', payload: mockUser });\r\n    }, 100);\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  }, []);\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}