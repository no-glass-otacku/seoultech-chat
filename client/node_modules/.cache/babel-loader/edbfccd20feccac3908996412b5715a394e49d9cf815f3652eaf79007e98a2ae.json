{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\song\\\\Documents\\\\GitHub\\\\seoultech-chat\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authService } from '../services/authService';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false\n      };\n    default:\n      return state;\n  }\n};\nconst initialState = {\n  user: null,\n  isAuthenticated: false,\n  loading: true,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    const initAuth = () => {\n      const user = authService.getCurrentUser();\n      const isAuthenticated = authService.isAuthenticated();\n      if (user && isAuthenticated) {\n        dispatch({\n          type: 'SET_USER',\n          payload: user\n        });\n      }\n      dispatch({\n        type: 'SET_LOADING',\n        payload: false\n      });\n    };\n    initAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const result = await authService.login(email, password);\n      dispatch({\n        type: 'SET_USER',\n        payload: result.user\n      });\n      toast.success('로그인에 성공했습니다.');\n      return result;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || '로그인에 실패했습니다.'\n      });\n      toast.error(error.message || '로그인에 실패했습니다.');\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      const result = await authService.register(userData);\n      toast.success('회원가입이 완료되었습니다.');\n      return result;\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: error.message || '회원가입에 실패했습니다.'\n      });\n      toast.error(error.message || '회원가입에 실패했습니다.');\n      throw error;\n    }\n  };\n  const logout = () => {\n    authService.logout();\n    dispatch({\n      type: 'LOGOUT'\n    });\n    toast.success('로그아웃되었습니다.');\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authService","toast","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","payload","user","isAuthenticated","error","initialState","AuthProvider","children","_s","dispatch","initAuth","getCurrentUser","login","email","password","result","success","message","register","userData","logout","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/song/Documents/GitHub/seoultech-chat/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { authService } from '../services/authService';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_USER':\r\n      return { ...state, user: action.payload, isAuthenticated: !!action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload, loading: false };\r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    case 'LOGOUT':\r\n      return { ...state, user: null, isAuthenticated: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  loading: true,\r\n  error: null\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    const initAuth = () => {\r\n      const user = authService.getCurrentUser();\r\n      const isAuthenticated = authService.isAuthenticated();\r\n      \r\n      if (user && isAuthenticated) {\r\n        dispatch({ type: 'SET_USER', payload: user });\r\n      }\r\n      dispatch({ type: 'SET_LOADING', payload: false });\r\n    };\r\n\r\n    initAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const result = await authService.login(email, password);\r\n      dispatch({ type: 'SET_USER', payload: result.user });\r\n      toast.success('로그인에 성공했습니다.');\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || '로그인에 실패했습니다.' });\r\n      toast.error(error.message || '로그인에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      const result = await authService.register(userData);\r\n      toast.success('회원가입이 완료되었습니다.');\r\n      return result;\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: error.message || '회원가입에 실패했습니다.' });\r\n      toast.error(error.message || '회원가입에 실패했습니다.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    authService.logout();\r\n    dispatch({ type: 'LOGOUT' });\r\n    toast.success('로그아웃되었습니다.');\r\n  };\r\n\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}