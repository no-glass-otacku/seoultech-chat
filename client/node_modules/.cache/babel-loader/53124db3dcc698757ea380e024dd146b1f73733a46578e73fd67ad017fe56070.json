{"ast":null,"code":"// Mock 데이터로 작동하는 챗봇 서비스\nlet mockChatRooms = [];\nlet mockMessages = [];\nlet nextChatRoomId = 1;\nlet nextMessageId = 1;\n\n// AI 응답 생성 함수\nconst generateBotResponse = userMessage => {\n  const lowerMessage = userMessage.toLowerCase();\n  if (lowerMessage.includes('안녕') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\n    return `안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 무엇을 도와드릴까요? 😊`;\n  }\n  if (lowerMessage.includes('학교') || lowerMessage.includes('서울과기대') || lowerMessage.includes('seoultech')) {\n    return `서울과학기술대학교는 1910년에 설립된 국립 기술대학교입니다. 실용적인 기술 교육을 중시하며, 공학, IT, 디자인 등 다양한 분야에서 우수한 교육을 제공하고 있습니다. 구체적으로 어떤 것이 궁금하신가요?`;\n  }\n  if (lowerMessage.includes('전공') || lowerMessage.includes('학과')) {\n    return `서울과학기술대학교에는 다양한 전공이 있습니다:\\n\\n• 공과대학: 기계공학과, 전기정보공학과, 컴퓨터공학과 등\\n• IT대학: 컴퓨터공학과, 전자IT미디어공학과 등\\n• 조형대학: 디자인학과, 도예학과 등\\n• 인문사회대학: 영어영문학과, 행정학과 등\\n\\n어떤 전공에 대해 더 자세히 알고 싶으신가요?`;\n  }\n  if (lowerMessage.includes('취업') || lowerMessage.includes('진로') || lowerMessage.includes('career')) {\n    return `서울과학기술대학교는 높은 취업률을 자랑합니다! 💼\\n\\n주요 진로 지원:\\n• 산학협력을 통한 현장실습\\n• 다양한 기업과의 채용연계 프로그램\\n• 창업지원센터 운영\\n• 취업박람회 정기 개최\\n\\n구체적인 전공별 취업 정보가 궁금하시면 말씀해 주세요!`;\n  }\n  if (lowerMessage.includes('입학') || lowerMessage.includes('admission')) {\n    return `서울과학기술대학교 입학 정보를 안내해드릴게요! 📚\\n\\n주요 전형:\\n• 수시모집: 학생부종합전형, 학생부교과전형\\n• 정시모집: 수능 성적 반영\\n• 특별전형: 특성화고교졸업자, 농어촌학생 등\\n\\n자세한 입학 정보는 대학 홈페이지에서 확인하실 수 있습니다.`;\n  }\n  if (lowerMessage.includes('도움') || lowerMessage.includes('help')) {\n    return `저는 서울과학기술대학교에 대한 다양한 정보를 제공해드릴 수 있습니다! 🎓\\n\\n• 학교 소개 및 역사\\n• 전공/학과 정보\\n• 취업 및 진로 안내\\n• 입학 정보\\n• 캠퍼스 생활\\n• 장학금 및 복지\\n\\n궁금한 것이 있으면 언제든 물어보세요!`;\n  }\n  if (lowerMessage.includes('캠퍼스') || lowerMessage.includes('campus')) {\n    return `서울과학기술대학교 캠퍼스 정보입니다! 🏫\\n\\n📍 위치: 서울특별시 노원구 공릉로 232\\n🚇 교통: 7호선 공릉역 1번 출구 도보 5분\\n\\n주요 시설:\\n• 중앙도서관\\n• 학생회관\\n• 체육관 및 수영장\\n• 기숙사 (생활관)\\n• 각종 연구소 및 실험실\\n\\n아름다운 캠퍼스에서 즐거운 대학생활을 보내실 수 있습니다!`;\n  }\n\n  // 기본 응답들\n  const responses = [`\"${userMessage}\"에 대해 더 자세히 알려드릴게요! 서울과학기술대학교 관련 질문이시라면 구체적으로 말씀해 주세요.`, `흥미로운 질문이네요! \"${userMessage}\"와 관련하여 서울과학기술대학교의 어떤 정보가 궁금하신지 알려주시면 더 정확한 답변을 드릴 수 있습니다.`, `좋은 질문입니다! \"${userMessage}\"에 대해 도움을 드리고 싶습니다. 학교, 전공, 취업, 입학 등 어떤 분야에 대한 질문인지 좀 더 구체적으로 말씀해 주세요.`, `\"${userMessage}\"에 대한 답변을 준비했습니다! 서울과학기술대학교에서 제공하는 다양한 정보 중 어떤 것이 가장 궁금하신가요?`];\n  return responses[Math.floor(Math.random() * responses.length)];\n};\nexport const chatService = {\n  // 채팅방 관련\n  async getChatRooms(userId) {\n    // 약간의 지연으로 실제 API 호출처럼 보이게 함\n    await new Promise(resolve => setTimeout(resolve, 300));\n    return mockChatRooms.filter(room => room.user_id === userId);\n  },\n  async createChatRoom(userId, title) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const newRoom = {\n      id: nextChatRoomId++,\n      user_id: userId,\n      title: title || '새로운 채팅',\n      last_message: null,\n      is_active: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockChatRooms.unshift(newRoom);\n\n    // 새 채팅방에 환영 메시지 자동 추가\n    const welcomeMessage = {\n      id: nextMessageId++,\n      chat_room_id: newRoom.id,\n      role: 'bot',\n      content: '안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 🎓\\n\\n학교에 대한 궁금한 점이 있으시면 언제든 물어보세요!\\n\\n• 학과 및 전공 정보\\n• 입학 및 진학 상담\\n• 취업 및 진로 안내\\n• 캠퍼스 생활 정보\\n\\n어떤 것이 궁금하신가요?',\n      message_order: 1,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockMessages.push(welcomeMessage);\n\n    // 채팅방의 마지막 메시지 업데이트\n    newRoom.last_message = '안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 🎓';\n    return newRoom;\n  },\n  async getChatRoom(chatRoomId) {\n    await new Promise(resolve => setTimeout(resolve, 100));\n    return mockChatRooms.find(room => room.id === chatRoomId);\n  },\n  async updateChatRoomTitle(chatRoomId, title) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const room = mockChatRooms.find(room => room.id === chatRoomId);\n    if (room) {\n      room.title = title;\n      room.updated_at = new Date().toISOString();\n    }\n    return room;\n  },\n  async deleteChatRoom(chatRoomId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const index = mockChatRooms.findIndex(room => room.id === chatRoomId);\n    if (index > -1) {\n      mockChatRooms.splice(index, 1);\n    }\n    // 해당 채팅방의 메시지들도 삭제\n    mockMessages = mockMessages.filter(msg => msg.chat_room_id !== chatRoomId);\n    return true;\n  },\n  // 메시지 관련\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    return mockMessages.filter(msg => msg.chat_room_id === chatRoomId).slice(offset, offset + limit);\n  },\n  async sendMessage(chatRoomId, content) {\n    await new Promise(resolve => setTimeout(resolve, 400)); // 조금 더 긴 지연으로 AI 생각하는 시간 시뮬레이션\n\n    // 사용자 메시지 생성\n    const userMessage = {\n      id: nextMessageId++,\n      chat_room_id: chatRoomId,\n      role: 'user',\n      content: content.trim(),\n      message_order: mockMessages.filter(msg => msg.chat_room_id === chatRoomId).length + 1,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockMessages.push(userMessage);\n\n    // AI 응답 생성\n    const botResponse = generateBotResponse(content);\n    const botMessage = {\n      id: nextMessageId++,\n      chat_room_id: chatRoomId,\n      role: 'bot',\n      content: botResponse,\n      message_order: mockMessages.filter(msg => msg.chat_room_id === chatRoomId).length + 1,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n    mockMessages.push(botMessage);\n\n    // 채팅방의 마지막 메시지 업데이트\n    const room = mockChatRooms.find(room => room.id === chatRoomId);\n    if (room) {\n      room.last_message = botResponse.length > 50 ? botResponse.substring(0, 50) + '...' : botResponse;\n      room.updated_at = new Date().toISOString();\n    }\n    return {\n      userMessage,\n      botMessage\n    };\n  },\n  async deleteMessage(messageId) {\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const index = mockMessages.findIndex(msg => msg.id === messageId);\n    if (index > -1) {\n      mockMessages.splice(index, 1);\n    }\n    return true;\n  }\n};","map":{"version":3,"names":["mockChatRooms","mockMessages","nextChatRoomId","nextMessageId","generateBotResponse","userMessage","lowerMessage","toLowerCase","includes","responses","Math","floor","random","length","chatService","getChatRooms","userId","Promise","resolve","setTimeout","filter","room","user_id","createChatRoom","title","newRoom","id","last_message","is_active","created_at","Date","toISOString","updated_at","unshift","welcomeMessage","chat_room_id","role","content","message_order","push","getChatRoom","chatRoomId","find","updateChatRoomTitle","deleteChatRoom","index","findIndex","splice","msg","getMessages","limit","offset","slice","sendMessage","trim","botResponse","botMessage","substring","deleteMessage","messageId"],"sources":["C:/Users/song/Documents/GitHub/seoultech_chat/client/src/services/chatService.js"],"sourcesContent":["// Mock 데이터로 작동하는 챗봇 서비스\r\nlet mockChatRooms = [];\r\n\r\nlet mockMessages = [];\r\n\r\nlet nextChatRoomId = 1;\r\nlet nextMessageId = 1;\r\n\r\n// AI 응답 생성 함수\r\nconst generateBotResponse = (userMessage) => {\r\n  const lowerMessage = userMessage.toLowerCase();\r\n  \r\n  if (lowerMessage.includes('안녕') || lowerMessage.includes('hello') || lowerMessage.includes('hi')) {\r\n    return `안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 무엇을 도와드릴까요? 😊`;\r\n  }\r\n  \r\n  if (lowerMessage.includes('학교') || lowerMessage.includes('서울과기대') || lowerMessage.includes('seoultech')) {\r\n    return `서울과학기술대학교는 1910년에 설립된 국립 기술대학교입니다. 실용적인 기술 교육을 중시하며, 공학, IT, 디자인 등 다양한 분야에서 우수한 교육을 제공하고 있습니다. 구체적으로 어떤 것이 궁금하신가요?`;\r\n  }\r\n  \r\n  if (lowerMessage.includes('전공') || lowerMessage.includes('학과')) {\r\n    return `서울과학기술대학교에는 다양한 전공이 있습니다:\\n\\n• 공과대학: 기계공학과, 전기정보공학과, 컴퓨터공학과 등\\n• IT대학: 컴퓨터공학과, 전자IT미디어공학과 등\\n• 조형대학: 디자인학과, 도예학과 등\\n• 인문사회대학: 영어영문학과, 행정학과 등\\n\\n어떤 전공에 대해 더 자세히 알고 싶으신가요?`;\r\n  }\r\n  \r\n  if (lowerMessage.includes('취업') || lowerMessage.includes('진로') || lowerMessage.includes('career')) {\r\n    return `서울과학기술대학교는 높은 취업률을 자랑합니다! 💼\\n\\n주요 진로 지원:\\n• 산학협력을 통한 현장실습\\n• 다양한 기업과의 채용연계 프로그램\\n• 창업지원센터 운영\\n• 취업박람회 정기 개최\\n\\n구체적인 전공별 취업 정보가 궁금하시면 말씀해 주세요!`;\r\n  }\r\n  \r\n  if (lowerMessage.includes('입학') || lowerMessage.includes('admission')) {\r\n    return `서울과학기술대학교 입학 정보를 안내해드릴게요! 📚\\n\\n주요 전형:\\n• 수시모집: 학생부종합전형, 학생부교과전형\\n• 정시모집: 수능 성적 반영\\n• 특별전형: 특성화고교졸업자, 농어촌학생 등\\n\\n자세한 입학 정보는 대학 홈페이지에서 확인하실 수 있습니다.`;\r\n  }\r\n  \r\n  if (lowerMessage.includes('도움') || lowerMessage.includes('help')) {\r\n    return `저는 서울과학기술대학교에 대한 다양한 정보를 제공해드릴 수 있습니다! 🎓\\n\\n• 학교 소개 및 역사\\n• 전공/학과 정보\\n• 취업 및 진로 안내\\n• 입학 정보\\n• 캠퍼스 생활\\n• 장학금 및 복지\\n\\n궁금한 것이 있으면 언제든 물어보세요!`;\r\n  }\r\n\r\n  if (lowerMessage.includes('캠퍼스') || lowerMessage.includes('campus')) {\r\n    return `서울과학기술대학교 캠퍼스 정보입니다! 🏫\\n\\n📍 위치: 서울특별시 노원구 공릉로 232\\n🚇 교통: 7호선 공릉역 1번 출구 도보 5분\\n\\n주요 시설:\\n• 중앙도서관\\n• 학생회관\\n• 체육관 및 수영장\\n• 기숙사 (생활관)\\n• 각종 연구소 및 실험실\\n\\n아름다운 캠퍼스에서 즐거운 대학생활을 보내실 수 있습니다!`;\r\n  }\r\n  \r\n  // 기본 응답들\r\n  const responses = [\r\n    `\"${userMessage}\"에 대해 더 자세히 알려드릴게요! 서울과학기술대학교 관련 질문이시라면 구체적으로 말씀해 주세요.`,\r\n    `흥미로운 질문이네요! \"${userMessage}\"와 관련하여 서울과학기술대학교의 어떤 정보가 궁금하신지 알려주시면 더 정확한 답변을 드릴 수 있습니다.`,\r\n    `좋은 질문입니다! \"${userMessage}\"에 대해 도움을 드리고 싶습니다. 학교, 전공, 취업, 입학 등 어떤 분야에 대한 질문인지 좀 더 구체적으로 말씀해 주세요.`,\r\n    `\"${userMessage}\"에 대한 답변을 준비했습니다! 서울과학기술대학교에서 제공하는 다양한 정보 중 어떤 것이 가장 궁금하신가요?`\r\n  ];\r\n  \r\n  return responses[Math.floor(Math.random() * responses.length)];\r\n};\r\n\r\nexport const chatService = {\r\n  // 채팅방 관련\r\n  async getChatRooms(userId) {\r\n    // 약간의 지연으로 실제 API 호출처럼 보이게 함\r\n    await new Promise(resolve => setTimeout(resolve, 300));\r\n    return mockChatRooms.filter(room => room.user_id === userId);\r\n  },\r\n\r\n  async createChatRoom(userId, title) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const newRoom = {\r\n      id: nextChatRoomId++,\r\n      user_id: userId,\r\n      title: title || '새로운 채팅',\r\n      last_message: null,\r\n      is_active: true,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockChatRooms.unshift(newRoom);\r\n    \r\n    // 새 채팅방에 환영 메시지 자동 추가\r\n    const welcomeMessage = {\r\n      id: nextMessageId++,\r\n      chat_room_id: newRoom.id,\r\n      role: 'bot',\r\n      content: '안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 🎓\\n\\n학교에 대한 궁금한 점이 있으시면 언제든 물어보세요!\\n\\n• 학과 및 전공 정보\\n• 입학 및 진학 상담\\n• 취업 및 진로 안내\\n• 캠퍼스 생활 정보\\n\\n어떤 것이 궁금하신가요?',\r\n      message_order: 1,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockMessages.push(welcomeMessage);\r\n    \r\n    // 채팅방의 마지막 메시지 업데이트\r\n    newRoom.last_message = '안녕하세요! 서울과학기술대학교 AI 챗봇입니다. 🎓';\r\n    \r\n    return newRoom;\r\n  },\r\n\r\n  async getChatRoom(chatRoomId) {\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    return mockChatRooms.find(room => room.id === chatRoomId);\r\n  },\r\n\r\n  async updateChatRoomTitle(chatRoomId, title) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const room = mockChatRooms.find(room => room.id === chatRoomId);\r\n    if (room) {\r\n      room.title = title;\r\n      room.updated_at = new Date().toISOString();\r\n    }\r\n    return room;\r\n  },\r\n\r\n  async deleteChatRoom(chatRoomId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = mockChatRooms.findIndex(room => room.id === chatRoomId);\r\n    if (index > -1) {\r\n      mockChatRooms.splice(index, 1);\r\n    }\r\n    // 해당 채팅방의 메시지들도 삭제\r\n    mockMessages = mockMessages.filter(msg => msg.chat_room_id !== chatRoomId);\r\n    return true;\r\n  },\r\n\r\n  // 메시지 관련\r\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    return mockMessages\r\n      .filter(msg => msg.chat_room_id === chatRoomId)\r\n      .slice(offset, offset + limit);\r\n  },\r\n\r\n  async sendMessage(chatRoomId, content) {\r\n    await new Promise(resolve => setTimeout(resolve, 400)); // 조금 더 긴 지연으로 AI 생각하는 시간 시뮬레이션\r\n    \r\n    // 사용자 메시지 생성\r\n    const userMessage = {\r\n      id: nextMessageId++,\r\n      chat_room_id: chatRoomId,\r\n      role: 'user',\r\n      content: content.trim(),\r\n      message_order: mockMessages.filter(msg => msg.chat_room_id === chatRoomId).length + 1,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockMessages.push(userMessage);\r\n\r\n    // AI 응답 생성\r\n    const botResponse = generateBotResponse(content);\r\n    const botMessage = {\r\n      id: nextMessageId++,\r\n      chat_room_id: chatRoomId,\r\n      role: 'bot',\r\n      content: botResponse,\r\n      message_order: mockMessages.filter(msg => msg.chat_room_id === chatRoomId).length + 1,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    mockMessages.push(botMessage);\r\n\r\n    // 채팅방의 마지막 메시지 업데이트\r\n    const room = mockChatRooms.find(room => room.id === chatRoomId);\r\n    if (room) {\r\n      room.last_message = botResponse.length > 50 ? botResponse.substring(0, 50) + '...' : botResponse;\r\n      room.updated_at = new Date().toISOString();\r\n    }\r\n\r\n    return {\r\n      userMessage,\r\n      botMessage\r\n    };\r\n  },\r\n\r\n  async deleteMessage(messageId) {\r\n    await new Promise(resolve => setTimeout(resolve, 200));\r\n    const index = mockMessages.findIndex(msg => msg.id === messageId);\r\n    if (index > -1) {\r\n      mockMessages.splice(index, 1);\r\n    }\r\n    return true;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}