{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  // 채팅방 관련\n  async getChatRooms(userId) {\n    try {\n      const response = await api.get(`/chat-rooms/user/${userId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get chat rooms:', error);\n      // 에러 시 빈 배열 반환\n      return [];\n    }\n  },\n  async createChatRoom(userId, title) {\n    try {\n      const response = await api.post('/chat-rooms', {\n        userId,\n        title\n      });\n      const chatRoomId = response.data.id;\n\n      // 새 채팅방 객체 생성\n      const newChatRoom = {\n        id: chatRoomId,\n        user_id: userId,\n        title: title || '새로운 채팅',\n        last_message: null,\n        is_active: true,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString()\n      };\n\n      // 환영 메시지를 백엔드에서 자동으로 생성하도록 요청\n      try {\n        await this.createWelcomeMessage(chatRoomId);\n        newChatRoom.last_message = '안녕하세요! 서울과학기술대학교 AI 챗봇입니다.';\n      } catch (welcomeError) {\n        console.error('Failed to create welcome message:', welcomeError);\n        // 환영 메시지 실패해도 채팅방은 생성됨\n      }\n      return newChatRoom;\n    } catch (error) {\n      console.error('Failed to create chat room:', error);\n      throw error;\n    }\n  },\n  // 환영 메시지를 봇이 먼저 보내도록 백엔드에 요청\n  async createWelcomeMessage(chatRoomId) {\n    try {\n      const response = await api.post('/messages/welcome', {\n        chat_room_id: chatRoomId\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to create welcome message:', error);\n      throw error;\n    }\n  },\n  async getChatRoom(chatRoomId) {\n    try {\n      const response = await api.get(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get chat room:', error);\n      throw error;\n    }\n  },\n  async updateChatRoomTitle(chatRoomId, title) {\n    try {\n      const response = await api.put(`/chat-rooms/${chatRoomId}`, {\n        title\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update chat room title:', error);\n      throw error;\n    }\n  },\n  async deleteChatRoom(chatRoomId) {\n    try {\n      const response = await api.delete(`/chat-rooms/${chatRoomId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to delete chat room:', error);\n      throw error;\n    }\n  },\n  // 메시지 관련\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\n    try {\n      const response = await api.get(`/messages/chat-room/${chatRoomId}?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get messages:', error);\n      // 에러 시 빈 배열 반환\n      return [];\n    }\n  },\n  async sendMessage(chatRoomId, content) {\n    try {\n      const response = await api.post('/messages', {\n        chat_room_id: chatRoomId,\n        content\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      throw error;\n    }\n  },\n  async deleteMessage(messageId) {\n    try {\n      const response = await api.delete(`/messages/${messageId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to delete message:', error);\n      throw error;\n    }\n  },\n  // 챗봇 테스트 (개발용)\n  async testChatbot(message) {\n    try {\n      const response = await api.post('/messages/test-chatbot', {\n        message\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to test chatbot:', error);\n      throw error;\n    }\n  },\n  // 지식베이스 관리 (관리자용)\n  async getKnowledgeBase(category = null) {\n    try {\n      const params = category ? {\n        category\n      } : {};\n      const response = await api.get('/messages/knowledge', {\n        params\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get knowledge base:', error);\n      return [];\n    }\n  },\n  async addKnowledge(knowledgeData) {\n    try {\n      const response = await api.post('/messages/knowledge', knowledgeData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to add knowledge:', error);\n      throw error;\n    }\n  },\n  async updateKnowledge(id, knowledgeData) {\n    try {\n      const response = await api.put(`/messages/knowledge/${id}`, knowledgeData);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to update knowledge:', error);\n      throw error;\n    }\n  },\n  // 채팅 분석 데이터 (관리자용)\n  async getChatAnalytics(limit = 100, offset = 0) {\n    try {\n      const response = await api.get(`/messages/analytics?limit=${limit}&offset=${offset}`);\n      return response.data;\n    } catch (error) {\n      console.error('Failed to get chat analytics:', error);\n      return [];\n    }\n  }\n};","map":{"version":3,"names":["api","chatService","getChatRooms","userId","response","get","data","error","console","createChatRoom","title","post","chatRoomId","id","newChatRoom","user_id","last_message","is_active","created_at","Date","toISOString","updated_at","createWelcomeMessage","welcomeError","chat_room_id","getChatRoom","updateChatRoomTitle","put","deleteChatRoom","delete","getMessages","limit","offset","sendMessage","content","deleteMessage","messageId","testChatbot","message","getKnowledgeBase","category","params","addKnowledge","knowledgeData","updateKnowledge","getChatAnalytics"],"sources":["C:/Users/song/Documents/GitHub/seoultech-chat/client/src/services/chatService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const chatService = {\r\n  // 채팅방 관련\r\n  async getChatRooms(userId) {\r\n    try {\r\n      const response = await api.get(`/chat-rooms/user/${userId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get chat rooms:', error);\r\n      // 에러 시 빈 배열 반환\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async createChatRoom(userId, title) {\r\n    try {\r\n      const response = await api.post('/chat-rooms', { userId, title });\r\n      const chatRoomId = response.data.id;\r\n      \r\n      // 새 채팅방 객체 생성\r\n      const newChatRoom = {\r\n        id: chatRoomId,\r\n        user_id: userId,\r\n        title: title || '새로운 채팅',\r\n        last_message: null,\r\n        is_active: true,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString()\r\n      };\r\n\r\n      // 환영 메시지를 백엔드에서 자동으로 생성하도록 요청\r\n      try {\r\n        await this.createWelcomeMessage(chatRoomId);\r\n        newChatRoom.last_message = '안녕하세요! 서울과학기술대학교 AI 챗봇입니다.';\r\n      } catch (welcomeError) {\r\n        console.error('Failed to create welcome message:', welcomeError);\r\n        // 환영 메시지 실패해도 채팅방은 생성됨\r\n      }\r\n      \r\n      return newChatRoom;\r\n    } catch (error) {\r\n      console.error('Failed to create chat room:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 환영 메시지를 봇이 먼저 보내도록 백엔드에 요청\r\n  async createWelcomeMessage(chatRoomId) {\r\n    try {\r\n      const response = await api.post('/messages/welcome', {\r\n        chat_room_id: chatRoomId\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to create welcome message:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async getChatRoom(chatRoomId) {\r\n    try {\r\n      const response = await api.get(`/chat-rooms/${chatRoomId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get chat room:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateChatRoomTitle(chatRoomId, title) {\r\n    try {\r\n      const response = await api.put(`/chat-rooms/${chatRoomId}`, { title });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to update chat room title:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteChatRoom(chatRoomId) {\r\n    try {\r\n      const response = await api.delete(`/chat-rooms/${chatRoomId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to delete chat room:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 메시지 관련\r\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\r\n    try {\r\n      const response = await api.get(`/messages/chat-room/${chatRoomId}?limit=${limit}&offset=${offset}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get messages:', error);\r\n      // 에러 시 빈 배열 반환\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async sendMessage(chatRoomId, content) {\r\n    try {\r\n      const response = await api.post('/messages', {\r\n        chat_room_id: chatRoomId,\r\n        content\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to send message:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async deleteMessage(messageId) {\r\n    try {\r\n      const response = await api.delete(`/messages/${messageId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to delete message:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 챗봇 테스트 (개발용)\r\n  async testChatbot(message) {\r\n    try {\r\n      const response = await api.post('/messages/test-chatbot', { message });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to test chatbot:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 지식베이스 관리 (관리자용)\r\n  async getKnowledgeBase(category = null) {\r\n    try {\r\n      const params = category ? { category } : {};\r\n      const response = await api.get('/messages/knowledge', { params });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get knowledge base:', error);\r\n      return [];\r\n    }\r\n  },\r\n\r\n  async addKnowledge(knowledgeData) {\r\n    try {\r\n      const response = await api.post('/messages/knowledge', knowledgeData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to add knowledge:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async updateKnowledge(id, knowledgeData) {\r\n    try {\r\n      const response = await api.put(`/messages/knowledge/${id}`, knowledgeData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to update knowledge:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // 채팅 분석 데이터 (관리자용)\r\n  async getChatAnalytics(limit = 100, offset = 0) {\r\n    try {\r\n      const response = await api.get(`/messages/analytics?limit=${limit}&offset=${offset}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Failed to get chat analytics:', error);\r\n      return [];\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}