{"ast":null,"code":"import api from './api';\nexport const chatService = {\n  // 채팅방 관련\n  async getChatRooms(userId) {\n    const response = await api.get(`/chat-rooms/user/${userId}`);\n    return response.data;\n  },\n  async createChatRoom(userId, title) {\n    const response = await api.post('/chat-rooms', {\n      userId,\n      title\n    });\n\n    // 새 채팅방 생성 후 환영 메시지 자동 전송\n    const chatRoomId = response.data.id;\n    await this.sendWelcomeMessage(chatRoomId);\n    return {\n      id: chatRoomId,\n      user_id: userId,\n      title: title || '새로운 채팅',\n      last_message: '안녕하세요! 서울과학기술대학교 AI 챗봇입니다.',\n      is_active: true,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    };\n  },\n  async sendWelcomeMessage(chatRoomId) {\n    try {\n      await api.post('/messages', {\n        chat_room_id: chatRoomId,\n        content: '환영합니다' // 이 키워드는 데이터베이스에서 환영 메시지로 매핑됨\n      });\n    } catch (error) {\n      console.error('Failed to send welcome message:', error);\n    }\n  },\n  async getChatRoom(chatRoomId) {\n    const response = await api.get(`/chat-rooms/${chatRoomId}`);\n    return response.data;\n  },\n  async updateChatRoomTitle(chatRoomId, title) {\n    const response = await api.put(`/chat-rooms/${chatRoomId}`, {\n      title\n    });\n    return response.data;\n  },\n  async deleteChatRoom(chatRoomId) {\n    const response = await api.delete(`/chat-rooms/${chatRoomId}`);\n    return response.data;\n  },\n  // 메시지 관련\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\n    const response = await api.get(`/messages/chat-room/${chatRoomId}?limit=${limit}&offset=${offset}`);\n    return response.data;\n  },\n  async sendMessage(chatRoomId, content) {\n    const response = await api.post('/messages', {\n      chat_room_id: chatRoomId,\n      content\n    });\n    return response.data;\n  },\n  async deleteMessage(messageId) {\n    const response = await api.delete(`/messages/${messageId}`);\n    return response.data;\n  },\n  // 챗봇 테스트 (개발용)\n  async testChatbot(message) {\n    const response = await api.post('/messages/test-chatbot', {\n      message\n    });\n    return response.data;\n  },\n  // 지식베이스 관리 (관리자용)\n  async getKnowledgeBase(category = null) {\n    const params = category ? {\n      category\n    } : {};\n    const response = await api.get('/messages/knowledge', {\n      params\n    });\n    return response.data;\n  },\n  async addKnowledge(knowledgeData) {\n    const response = await api.post('/messages/knowledge', knowledgeData);\n    return response.data;\n  },\n  async updateKnowledge(id, knowledgeData) {\n    const response = await api.put(`/messages/knowledge/${id}`, knowledgeData);\n    return response.data;\n  },\n  // 채팅 분석 데이터 (관리자용)\n  async getChatAnalytics(limit = 100, offset = 0) {\n    const response = await api.get(`/messages/analytics?limit=${limit}&offset=${offset}`);\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","chatService","getChatRooms","userId","response","get","data","createChatRoom","title","post","chatRoomId","id","sendWelcomeMessage","user_id","last_message","is_active","created_at","Date","toISOString","updated_at","chat_room_id","content","error","console","getChatRoom","updateChatRoomTitle","put","deleteChatRoom","delete","getMessages","limit","offset","sendMessage","deleteMessage","messageId","testChatbot","message","getKnowledgeBase","category","params","addKnowledge","knowledgeData","updateKnowledge","getChatAnalytics"],"sources":["C:/Users/song/Documents/GitHub/seoultech-chat/client/src/services/chatService.js"],"sourcesContent":["import api from './api';\r\n\r\nexport const chatService = {\r\n  // 채팅방 관련\r\n  async getChatRooms(userId) {\r\n    const response = await api.get(`/chat-rooms/user/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async createChatRoom(userId, title) {\r\n    const response = await api.post('/chat-rooms', { userId, title });\r\n    \r\n    // 새 채팅방 생성 후 환영 메시지 자동 전송\r\n    const chatRoomId = response.data.id;\r\n    await this.sendWelcomeMessage(chatRoomId);\r\n    \r\n    return {\r\n      id: chatRoomId,\r\n      user_id: userId,\r\n      title: title || '새로운 채팅',\r\n      last_message: '안녕하세요! 서울과학기술대학교 AI 챗봇입니다.',\r\n      is_active: true,\r\n      created_at: new Date().toISOString(),\r\n      updated_at: new Date().toISOString()\r\n    };\r\n  },\r\n\r\n  async sendWelcomeMessage(chatRoomId) {\r\n    try {\r\n      await api.post('/messages', {\r\n        chat_room_id: chatRoomId,\r\n        content: '환영합니다' // 이 키워드는 데이터베이스에서 환영 메시지로 매핑됨\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to send welcome message:', error);\r\n    }\r\n  },\r\n\r\n  async getChatRoom(chatRoomId) {\r\n    const response = await api.get(`/chat-rooms/${chatRoomId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async updateChatRoomTitle(chatRoomId, title) {\r\n    const response = await api.put(`/chat-rooms/${chatRoomId}`, { title });\r\n    return response.data;\r\n  },\r\n\r\n  async deleteChatRoom(chatRoomId) {\r\n    const response = await api.delete(`/chat-rooms/${chatRoomId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // 메시지 관련\r\n  async getMessages(chatRoomId, limit = 100, offset = 0) {\r\n    const response = await api.get(`/messages/chat-room/${chatRoomId}?limit=${limit}&offset=${offset}`);\r\n    return response.data;\r\n  },\r\n\r\n  async sendMessage(chatRoomId, content) {\r\n    const response = await api.post('/messages', {\r\n      chat_room_id: chatRoomId,\r\n      content\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async deleteMessage(messageId) {\r\n    const response = await api.delete(`/messages/${messageId}`);\r\n    return response.data;\r\n  },\r\n\r\n  // 챗봇 테스트 (개발용)\r\n  async testChatbot(message) {\r\n    const response = await api.post('/messages/test-chatbot', { message });\r\n    return response.data;\r\n  },\r\n\r\n  // 지식베이스 관리 (관리자용)\r\n  async getKnowledgeBase(category = null) {\r\n    const params = category ? { category } : {};\r\n    const response = await api.get('/messages/knowledge', { params });\r\n    return response.data;\r\n  },\r\n\r\n  async addKnowledge(knowledgeData) {\r\n    const response = await api.post('/messages/knowledge', knowledgeData);\r\n    return response.data;\r\n  },\r\n\r\n  async updateKnowledge(id, knowledgeData) {\r\n    const response = await api.put(`/messages/knowledge/${id}`, knowledgeData);\r\n    return response.data;\r\n  },\r\n\r\n  // 채팅 분석 데이터 (관리자용)\r\n  async getChatAnalytics(limit = 100, offset = 0) {\r\n    const response = await api.get(`/messages/analytics?limit=${limit}&offset=${offset}`);\r\n    return response.data;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}