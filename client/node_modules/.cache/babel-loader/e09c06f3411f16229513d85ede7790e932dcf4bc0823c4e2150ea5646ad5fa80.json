{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\song\\\\Documents\\\\GitHub\\\\seoultech-chat\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case 'SET_LOADING':\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case 'SET_USER':\n      return {\n        ...state,\n        user: action.payload,\n        isAuthenticated: !!action.payload\n      };\n    case 'SET_ERROR':\n      return {\n        ...state,\n        error: action.payload,\n        loading: false\n      };\n    case 'CLEAR_ERROR':\n      return {\n        ...state,\n        error: null\n      };\n    case 'LOGOUT':\n      return {\n        ...state,\n        user: null,\n        isAuthenticated: false\n      };\n    default:\n      return state;\n  }\n};\n\n// 가짜 사용자 정보 (테스트용)\nconst mockUser = {\n  id: 1,\n  email: 'test@seoultech.ac.kr',\n  username: '테스트사용자',\n  created_at: new Date().toISOString()\n};\nconst initialState = {\n  user: mockUser,\n  // 항상 로그인된 상태로 시작\n  isAuthenticated: true,\n  // 항상 인증된 상태\n  loading: false,\n  error: null\n};\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n  useEffect(() => {\n    // 자동으로 가짜 사용자로 로그인 처리\n    dispatch({\n      type: 'SET_USER',\n      payload: mockUser\n    });\n    dispatch({\n      type: 'SET_LOADING',\n      payload: false\n    });\n  }, []);\n\n  // 모든 인증 관련 함수들을 가짜로 처리\n  const login = async (email, password) => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // 실제 로그인 대신 가짜 성공 처리\n      setTimeout(() => {\n        dispatch({\n          type: 'SET_USER',\n          payload: mockUser\n        });\n      }, 500); // 로딩 효과를 위한 약간의 지연\n      return {\n        user: mockUser\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: '로그인에 실패했습니다.'\n      });\n      throw error;\n    }\n  };\n  const register = async userData => {\n    try {\n      dispatch({\n        type: 'SET_LOADING',\n        payload: true\n      });\n      // 실제 회원가입 대신 가짜 성공 처리\n      setTimeout(() => {\n        dispatch({\n          type: 'SET_LOADING',\n          payload: false\n        });\n      }, 500);\n      return {\n        message: 'Registration successful'\n      };\n    } catch (error) {\n      dispatch({\n        type: 'SET_ERROR',\n        payload: '회원가입에 실패했습니다.'\n      });\n      throw error;\n    }\n  };\n  const logout = () => {\n    // 로그아웃해도 다시 자동 로그인\n    setTimeout(() => {\n      dispatch({\n        type: 'SET_USER',\n        payload: mockUser\n      });\n    }, 100);\n  };\n  const clearError = () => {\n    dispatch({\n      type: 'CLEAR_ERROR'\n    });\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport { AuthContext };\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useReducer","useEffect","jsxDEV","_jsxDEV","AuthContext","authReducer","state","action","type","loading","payload","user","isAuthenticated","error","mockUser","id","email","username","created_at","Date","toISOString","initialState","AuthProvider","children","_s","dispatch","login","password","setTimeout","register","userData","message","logout","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/song/Documents/GitHub/seoultech-chat/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useReducer, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nconst authReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LOADING':\r\n      return { ...state, loading: action.payload };\r\n    case 'SET_USER':\r\n      return { ...state, user: action.payload, isAuthenticated: !!action.payload };\r\n    case 'SET_ERROR':\r\n      return { ...state, error: action.payload, loading: false };\r\n    case 'CLEAR_ERROR':\r\n      return { ...state, error: null };\r\n    case 'LOGOUT':\r\n      return { ...state, user: null, isAuthenticated: false };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// 가짜 사용자 정보 (테스트용)\r\nconst mockUser = {\r\n  id: 1,\r\n  email: 'test@seoultech.ac.kr',\r\n  username: '테스트사용자',\r\n  created_at: new Date().toISOString()\r\n};\r\n\r\nconst initialState = {\r\n  user: mockUser, // 항상 로그인된 상태로 시작\r\n  isAuthenticated: true, // 항상 인증된 상태\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n\r\n  useEffect(() => {\r\n    // 자동으로 가짜 사용자로 로그인 처리\r\n    dispatch({ type: 'SET_USER', payload: mockUser });\r\n    dispatch({ type: 'SET_LOADING', payload: false });\r\n  }, []);\r\n\r\n  // 모든 인증 관련 함수들을 가짜로 처리\r\n  const login = async (email, password) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // 실제 로그인 대신 가짜 성공 처리\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_USER', payload: mockUser });\r\n      }, 500); // 로딩 효과를 위한 약간의 지연\r\n      return { user: mockUser };\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: '로그인에 실패했습니다.' });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      dispatch({ type: 'SET_LOADING', payload: true });\r\n      // 실제 회원가입 대신 가짜 성공 처리\r\n      setTimeout(() => {\r\n        dispatch({ type: 'SET_LOADING', payload: false });\r\n      }, 500);\r\n      return { message: 'Registration successful' };\r\n    } catch (error) {\r\n      dispatch({ type: 'SET_ERROR', payload: '회원가입에 실패했습니다.' });\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // 로그아웃해도 다시 자동 로그인\r\n    setTimeout(() => {\r\n      dispatch({ type: 'SET_USER', payload: mockUser });\r\n    }, 100);\r\n  };\r\n\r\n  const clearError = () => {\r\n    dispatch({ type: 'CLEAR_ERROR' });\r\n  };\r\n\r\n  const value = {\r\n    ...state,\r\n    login,\r\n    register,\r\n    logout,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}