{"ast":null,"code":"const userDao = require('../dao/userDao');\nclass AuthController {\n  // 간단한 로그인 (평문 비밀번호)\n  async login(req, res) {\n    try {\n      const {\n        email,\n        password\n      } = req.body;\n      console.log('Login attempt:', {\n        email,\n        password\n      });\n\n      // 입력 검증\n      if (!email || !password) {\n        return res.status(400).json({\n          error: 'Email and password are required'\n        });\n      }\n\n      // 사용자 조회\n      const user = await userDao.getUserByEmail(email);\n      console.log('User found:', user);\n      if (!user) {\n        return res.status(401).json({\n          error: 'Invalid email or password'\n        });\n      }\n\n      // 평문 비밀번호 비교\n      if (password !== user.password_hash) {\n        console.log('Password mismatch');\n        console.log('Expected:', user.password_hash);\n        console.log('Received:', password);\n        return res.status(401).json({\n          error: 'Invalid email or password'\n        });\n      }\n\n      // 로그인 성공\n      const {\n        password_hash,\n        ...userWithoutPassword\n      } = user;\n      console.log('Login successful for:', userWithoutPassword.email);\n      res.json({\n        message: 'Login successful',\n        user: userWithoutPassword\n      });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n  }\n\n  // 회원가입 (평문 비밀번호)\n  async register(req, res) {\n    try {\n      const {\n        email,\n        username,\n        password\n      } = req.body;\n\n      // 입력 검증\n      if (!email || !username || !password) {\n        return res.status(400).json({\n          error: 'Email, username, and password are required'\n        });\n      }\n\n      // 이메일 중복 체크\n      const existingUser = await userDao.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({\n          error: 'Email already exists'\n        });\n      }\n\n      // 사용자 생성 (평문 비밀번호 그대로 저장)\n      const userId = await userDao.createUser({\n        email,\n        username,\n        password_hash: password // password_hash 필드에 평문 저장\n      });\n      res.status(201).json({\n        id: userId,\n        message: 'User created successfully'\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({\n        error: 'Internal server error'\n      });\n    }\n  }\n}\nmodule.exports = new AuthController();","map":{"version":3,"names":["userDao","require","AuthController","login","req","res","email","password","body","console","log","status","json","error","user","getUserByEmail","password_hash","userWithoutPassword","message","register","username","existingUser","userId","createUser","id","module","exports"],"sources":["C:/Users/song/Documents/GitHub/seoultech_chat/client/src/components/auth/RegisterForm.js"],"sourcesContent":["const userDao = require('../dao/userDao');\r\n\r\nclass AuthController {\r\n  // 간단한 로그인 (평문 비밀번호)\r\n  async login(req, res) {\r\n    try {\r\n      const { email, password } = req.body;\r\n      \r\n      console.log('Login attempt:', { email, password });\r\n\r\n      // 입력 검증\r\n      if (!email || !password) {\r\n        return res.status(400).json({ \r\n          error: 'Email and password are required' \r\n        });\r\n      }\r\n\r\n      // 사용자 조회\r\n      const user = await userDao.getUserByEmail(email);\r\n      console.log('User found:', user);\r\n      \r\n      if (!user) {\r\n        return res.status(401).json({ \r\n          error: 'Invalid email or password' \r\n        });\r\n      }\r\n\r\n      // 평문 비밀번호 비교\r\n      if (password !== user.password_hash) {\r\n        console.log('Password mismatch');\r\n        console.log('Expected:', user.password_hash);\r\n        console.log('Received:', password);\r\n        return res.status(401).json({ \r\n          error: 'Invalid email or password' \r\n        });\r\n      }\r\n\r\n      // 로그인 성공\r\n      const { password_hash, ...userWithoutPassword } = user;\r\n      \r\n      console.log('Login successful for:', userWithoutPassword.email);\r\n      \r\n      res.json({\r\n        message: 'Login successful',\r\n        user: userWithoutPassword\r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  }\r\n\r\n  // 회원가입 (평문 비밀번호)\r\n  async register(req, res) {\r\n    try {\r\n      const { email, username, password } = req.body;\r\n\r\n      // 입력 검증\r\n      if (!email || !username || !password) {\r\n        return res.status(400).json({ \r\n          error: 'Email, username, and password are required' \r\n        });\r\n      }\r\n\r\n      // 이메일 중복 체크\r\n      const existingUser = await userDao.getUserByEmail(email);\r\n      if (existingUser) {\r\n        return res.status(400).json({ \r\n          error: 'Email already exists' \r\n        });\r\n      }\r\n\r\n      // 사용자 생성 (평문 비밀번호 그대로 저장)\r\n      const userId = await userDao.createUser({ \r\n        email, \r\n        username, \r\n        password_hash: password // password_hash 필드에 평문 저장\r\n      });\r\n\r\n      res.status(201).json({ \r\n        id: userId, \r\n        message: 'User created successfully' \r\n      });\r\n\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      res.status(500).json({ error: 'Internal server error' });\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new AuthController();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}